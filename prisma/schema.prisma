generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id         String   @id @default(cuid())
  name       String?  @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  events     events[]
}

model channels {
  id          String          @id @default(cuid())
  user_id     String
  name        String
  description String?         @db.Text
  image       String
  ktp_photo   String
  nik         String
  no_rek      String
  phone       String
  status      channels_status @default(UNVERIFIED)
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  users       users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  events      events[]
  follows     follows[]
  ratings     ratings[]
}

model events {
  id                String              @id @default(cuid())
  channel_id        String
  category_id       String
  tag_id            String
  name              String
  description       String?             @db.Text
  image             String
  website_url       String
  location          String
  link_group        String
  is_paid           Boolean             @default(false)
  is_online         Boolean             @default(true)
  price             Float
  status            events_status       @default(PENDING)
  post_duration     Int                 @default(0)
  event_date        DateTime
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  channels          channels            @relation(fields: [channel_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categories        categories          @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tags              tags                @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  favorites         favorites[]
  user_events       user_events[]
  withdraw_requests withdraw_requests[]
  reports           reports[]
}

model favorites {
  id         String   @id @default(cuid())
  user_id    String
  event_id   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  events     events   @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model follows {
  id         String   @id @default(cuid())
  user_id    String
  channel_id String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channels   channels @relation(fields: [channel_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model tags {
  id         String   @id @default(cuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  events     events[]
}

model user_events {
  id         String   @id @default(cuid())
  user_id    String
  event_id   String
  status     Boolean
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  events     events   @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model users {
  id                String              @id @default(cuid())
  name              String
  email             String
  image             String
  role              users_role
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  channels          channels[]
  favorites         favorites[]
  follows           follows[]
  user_events       user_events[]
  withdraw_requests withdraw_requests[]
  reports           reports[]
  ratings           ratings[]

  @@index([email], map: "email")
}

model withdraw_requests {
  id         String   @id @default(cuid())
  user_id    String
  event_id   String
  amount     Decimal
  events     events   @relation(fields: [event_id], references: [id])
  users      users    @relation(fields: [user_id], references: [id])
  status     Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model reports {
  id          String   @id @default(cuid())
  user_id     String
  event_id    String
  description String
  events      events   @relation(fields: [event_id], references: [id])
  users       users    @relation(fields: [user_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model ratings {
  id         String   @id @default(cuid())
  user_id    String
  channel_id String
  rate       Int
  users      users    @relation(fields: [user_id], references: [id])
  events     channels @relation(fields: [channel_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum users_role {
  ADMIN
  USER
}

enum events_status {
  DONE
  PENDING
  ONGOING
}

enum channels_status {
  VERIFIED
  UNVERIFIED
}
